name: update-flakes
on:
  schedule:
    - cron:  '*/10 * * * *'
  workflow_dispatch:
jobs:
  get-flakes:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.get-flakes.outputs.matrix }}
      noop: ${{ steps.get-flakes.outputs.noop }}
    steps:
      - uses: actions/checkout@v2.3.5
      - uses: cachix/install-nix-action@v16
        with:
          extra_nix_config: |
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
            experimental-features = nix-command flakes recursive-nix
      - id: get-flakes
        run: |
          get_flake_revs() {
            nix flake metadata --json \
              | jq -c '
                .locks.nodes
                | map_values(.locked.rev | select(. != null))'
          }

          get_updated_flakes() {
            jq -c -s '
              .[1] as $new
              | .[0]
              | to_entries
              | map({ flake: .key, old_rev: .value, new_rev: $new[.key] })
              | map(select(.old_rev != .new_rev))
              | {flake: map(.flake)}' <(echo "$1") <(echo "$2")
          }

          old="$(get_flake_revs)"
          nix flake update
          new="$(get_flake_revs)"

          updated="$(get_updated_flakes "$old" "$new")"
          count="$(jq '.flake | length' <<< "$updated")"

          if [ "$count" == 0 ]; then
            echo "::set-output name=noop::true"
          else
            echo "::set-output name=noop::false"
          fi

          echo "::set-output name=matrix::$updated"
  update-flake:
    name: update-${{ matrix.flake }}
    runs-on: ubuntu-latest
    needs: get-flakes
    if: ${{ needs.get-flakes.outputs.noop == 'false' }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.get-flakes.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v2.3.5
      - uses: cachix/install-nix-action@v16
        with:
          extra_nix_config: |
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
            experimental-features = nix-command flakes recursive-nix
      - uses: cachix/cachix-action@v10
        with:
          name: nix-config
          signingKey: '${{ secrets.CACHIX_SIGNING_KEY }}'
      - run: git config --global user.email "hatesegfault@protonmail.ch"
      - run: git config --global user.name "hatesegfault"
      - uses: cpcloud/flake-update-actions@1.0.2
        with:
          dependency: ${{ matrix.flake }}
          pull-request-token: ${{ secrets.PAT }}
          delete-branch: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
          pull-request-branch-prefix: update-
          automerge: true
